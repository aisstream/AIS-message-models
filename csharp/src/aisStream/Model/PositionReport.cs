/*
 * Ais-Stream WebsocketObjects
 *
 * OpenAPI 3.0 definitions for the data models used by aisstream.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace aisStream.Model
{
    /// <summary>
    /// PositionReport
    /// </summary>
    [DataContract(Name = "PositionReport")]
    public partial class PositionReport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PositionReport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PositionReport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PositionReport" /> class.
        /// </summary>
        /// <param name="messageID">messageID (required).</param>
        /// <param name="repeatIndicator">repeatIndicator (required).</param>
        /// <param name="userID">userID (required).</param>
        /// <param name="valid">valid (required).</param>
        /// <param name="navigationalStatus">navigationalStatus (required).</param>
        /// <param name="rateOfTurn">rateOfTurn (required).</param>
        /// <param name="sog">sog (required).</param>
        /// <param name="positionAccuracy">positionAccuracy (required).</param>
        /// <param name="longitude">longitude (required).</param>
        /// <param name="latitude">latitude (required).</param>
        /// <param name="cog">cog (required).</param>
        /// <param name="trueHeading">trueHeading (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="specialManoeuvreIndicator">specialManoeuvreIndicator (required).</param>
        /// <param name="spare">spare (required).</param>
        /// <param name="raim">raim (required).</param>
        /// <param name="communicationState">communicationState (required).</param>
        public PositionReport(int messageID = default(int), int repeatIndicator = default(int), int userID = default(int), bool valid = default(bool), int navigationalStatus = default(int), int rateOfTurn = default(int), double sog = default(double), bool positionAccuracy = default(bool), double longitude = default(double), double latitude = default(double), double cog = default(double), int trueHeading = default(int), int timestamp = default(int), int specialManoeuvreIndicator = default(int), int spare = default(int), bool raim = default(bool), int communicationState = default(int))
        {
            this.MessageID = messageID;
            this.RepeatIndicator = repeatIndicator;
            this.UserID = userID;
            this.Valid = valid;
            this.NavigationalStatus = navigationalStatus;
            this.RateOfTurn = rateOfTurn;
            this.Sog = sog;
            this.PositionAccuracy = positionAccuracy;
            this.Longitude = longitude;
            this.Latitude = latitude;
            this.Cog = cog;
            this.TrueHeading = trueHeading;
            this.Timestamp = timestamp;
            this.SpecialManoeuvreIndicator = specialManoeuvreIndicator;
            this.Spare = spare;
            this.Raim = raim;
            this.CommunicationState = communicationState;
        }

        /// <summary>
        /// Gets or Sets MessageID
        /// </summary>
        [DataMember(Name = "MessageID", IsRequired = true, EmitDefaultValue = true)]
        public int MessageID { get; set; }

        /// <summary>
        /// Gets or Sets RepeatIndicator
        /// </summary>
        [DataMember(Name = "RepeatIndicator", IsRequired = true, EmitDefaultValue = true)]
        public int RepeatIndicator { get; set; }

        /// <summary>
        /// Gets or Sets UserID
        /// </summary>
        [DataMember(Name = "UserID", IsRequired = true, EmitDefaultValue = true)]
        public int UserID { get; set; }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name = "Valid", IsRequired = true, EmitDefaultValue = true)]
        public bool Valid { get; set; }

        /// <summary>
        /// Gets or Sets NavigationalStatus
        /// </summary>
        [DataMember(Name = "NavigationalStatus", IsRequired = true, EmitDefaultValue = true)]
        public int NavigationalStatus { get; set; }

        /// <summary>
        /// Gets or Sets RateOfTurn
        /// </summary>
        [DataMember(Name = "RateOfTurn", IsRequired = true, EmitDefaultValue = true)]
        public int RateOfTurn { get; set; }

        /// <summary>
        /// Gets or Sets Sog
        /// </summary>
        [DataMember(Name = "Sog", IsRequired = true, EmitDefaultValue = true)]
        public double Sog { get; set; }

        /// <summary>
        /// Gets or Sets PositionAccuracy
        /// </summary>
        [DataMember(Name = "PositionAccuracy", IsRequired = true, EmitDefaultValue = true)]
        public bool PositionAccuracy { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name = "Longitude", IsRequired = true, EmitDefaultValue = true)]
        public double Longitude { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name = "Latitude", IsRequired = true, EmitDefaultValue = true)]
        public double Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Cog
        /// </summary>
        [DataMember(Name = "Cog", IsRequired = true, EmitDefaultValue = true)]
        public double Cog { get; set; }

        /// <summary>
        /// Gets or Sets TrueHeading
        /// </summary>
        [DataMember(Name = "TrueHeading", IsRequired = true, EmitDefaultValue = true)]
        public int TrueHeading { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "Timestamp", IsRequired = true, EmitDefaultValue = true)]
        public int Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets SpecialManoeuvreIndicator
        /// </summary>
        [DataMember(Name = "SpecialManoeuvreIndicator", IsRequired = true, EmitDefaultValue = true)]
        public int SpecialManoeuvreIndicator { get; set; }

        /// <summary>
        /// Gets or Sets Spare
        /// </summary>
        [DataMember(Name = "Spare", IsRequired = true, EmitDefaultValue = true)]
        public int Spare { get; set; }

        /// <summary>
        /// Gets or Sets Raim
        /// </summary>
        [DataMember(Name = "Raim", IsRequired = true, EmitDefaultValue = true)]
        public bool Raim { get; set; }

        /// <summary>
        /// Gets or Sets CommunicationState
        /// </summary>
        [DataMember(Name = "CommunicationState", IsRequired = true, EmitDefaultValue = true)]
        public int CommunicationState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PositionReport {\n");
            sb.Append("  MessageID: ").Append(MessageID).Append("\n");
            sb.Append("  RepeatIndicator: ").Append(RepeatIndicator).Append("\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  NavigationalStatus: ").Append(NavigationalStatus).Append("\n");
            sb.Append("  RateOfTurn: ").Append(RateOfTurn).Append("\n");
            sb.Append("  Sog: ").Append(Sog).Append("\n");
            sb.Append("  PositionAccuracy: ").Append(PositionAccuracy).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Cog: ").Append(Cog).Append("\n");
            sb.Append("  TrueHeading: ").Append(TrueHeading).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  SpecialManoeuvreIndicator: ").Append(SpecialManoeuvreIndicator).Append("\n");
            sb.Append("  Spare: ").Append(Spare).Append("\n");
            sb.Append("  Raim: ").Append(Raim).Append("\n");
            sb.Append("  CommunicationState: ").Append(CommunicationState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
