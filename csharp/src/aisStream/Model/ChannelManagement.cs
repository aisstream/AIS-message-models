/*
 * Ais-Stream WebsocketObjects
 *
 * OpenAPI 3.0 definitions for the data models used by aisstream.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace aisStream.Model
{
    /// <summary>
    /// ChannelManagement
    /// </summary>
    [DataContract(Name = "ChannelManagement")]
    public partial class ChannelManagement : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelManagement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChannelManagement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelManagement" /> class.
        /// </summary>
        /// <param name="messageID">messageID (required).</param>
        /// <param name="repeatIndicator">repeatIndicator (required).</param>
        /// <param name="userID">userID (required).</param>
        /// <param name="valid">valid (required).</param>
        /// <param name="spare1">spare1 (required).</param>
        /// <param name="channelA">channelA (required).</param>
        /// <param name="channelB">channelB (required).</param>
        /// <param name="txRxMode">txRxMode (required).</param>
        /// <param name="lowPower">lowPower (required).</param>
        /// <param name="area">area (required).</param>
        /// <param name="unicast">unicast (required).</param>
        /// <param name="isAddressed">isAddressed (required).</param>
        /// <param name="bwA">bwA (required).</param>
        /// <param name="bwB">bwB (required).</param>
        /// <param name="transitionalZoneSize">transitionalZoneSize (required).</param>
        /// <param name="spare4">spare4 (required).</param>
        public ChannelManagement(int messageID = default(int), int repeatIndicator = default(int), int userID = default(int), bool valid = default(bool), int spare1 = default(int), int channelA = default(int), int channelB = default(int), int txRxMode = default(int), bool lowPower = default(bool), ChannelManagementArea area = default(ChannelManagementArea), ChannelManagementUnicast unicast = default(ChannelManagementUnicast), bool isAddressed = default(bool), bool bwA = default(bool), bool bwB = default(bool), int transitionalZoneSize = default(int), int spare4 = default(int))
        {
            this.MessageID = messageID;
            this.RepeatIndicator = repeatIndicator;
            this.UserID = userID;
            this.Valid = valid;
            this.Spare1 = spare1;
            this.ChannelA = channelA;
            this.ChannelB = channelB;
            this.TxRxMode = txRxMode;
            this.LowPower = lowPower;
            // to ensure "area" is required (not null)
            if (area == null)
            {
                throw new ArgumentNullException("area is a required property for ChannelManagement and cannot be null");
            }
            this.Area = area;
            // to ensure "unicast" is required (not null)
            if (unicast == null)
            {
                throw new ArgumentNullException("unicast is a required property for ChannelManagement and cannot be null");
            }
            this.Unicast = unicast;
            this.IsAddressed = isAddressed;
            this.BwA = bwA;
            this.BwB = bwB;
            this.TransitionalZoneSize = transitionalZoneSize;
            this.Spare4 = spare4;
        }

        /// <summary>
        /// Gets or Sets MessageID
        /// </summary>
        [DataMember(Name = "MessageID", IsRequired = true, EmitDefaultValue = true)]
        public int MessageID { get; set; }

        /// <summary>
        /// Gets or Sets RepeatIndicator
        /// </summary>
        [DataMember(Name = "RepeatIndicator", IsRequired = true, EmitDefaultValue = true)]
        public int RepeatIndicator { get; set; }

        /// <summary>
        /// Gets or Sets UserID
        /// </summary>
        [DataMember(Name = "UserID", IsRequired = true, EmitDefaultValue = true)]
        public int UserID { get; set; }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name = "Valid", IsRequired = true, EmitDefaultValue = true)]
        public bool Valid { get; set; }

        /// <summary>
        /// Gets or Sets Spare1
        /// </summary>
        [DataMember(Name = "Spare1", IsRequired = true, EmitDefaultValue = true)]
        public int Spare1 { get; set; }

        /// <summary>
        /// Gets or Sets ChannelA
        /// </summary>
        [DataMember(Name = "ChannelA", IsRequired = true, EmitDefaultValue = true)]
        public int ChannelA { get; set; }

        /// <summary>
        /// Gets or Sets ChannelB
        /// </summary>
        [DataMember(Name = "ChannelB", IsRequired = true, EmitDefaultValue = true)]
        public int ChannelB { get; set; }

        /// <summary>
        /// Gets or Sets TxRxMode
        /// </summary>
        [DataMember(Name = "TxRxMode", IsRequired = true, EmitDefaultValue = true)]
        public int TxRxMode { get; set; }

        /// <summary>
        /// Gets or Sets LowPower
        /// </summary>
        [DataMember(Name = "LowPower", IsRequired = true, EmitDefaultValue = true)]
        public bool LowPower { get; set; }

        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [DataMember(Name = "Area", IsRequired = true, EmitDefaultValue = true)]
        public ChannelManagementArea Area { get; set; }

        /// <summary>
        /// Gets or Sets Unicast
        /// </summary>
        [DataMember(Name = "Unicast", IsRequired = true, EmitDefaultValue = true)]
        public ChannelManagementUnicast Unicast { get; set; }

        /// <summary>
        /// Gets or Sets IsAddressed
        /// </summary>
        [DataMember(Name = "IsAddressed", IsRequired = true, EmitDefaultValue = true)]
        public bool IsAddressed { get; set; }

        /// <summary>
        /// Gets or Sets BwA
        /// </summary>
        [DataMember(Name = "BwA", IsRequired = true, EmitDefaultValue = true)]
        public bool BwA { get; set; }

        /// <summary>
        /// Gets or Sets BwB
        /// </summary>
        [DataMember(Name = "BwB", IsRequired = true, EmitDefaultValue = true)]
        public bool BwB { get; set; }

        /// <summary>
        /// Gets or Sets TransitionalZoneSize
        /// </summary>
        [DataMember(Name = "TransitionalZoneSize", IsRequired = true, EmitDefaultValue = true)]
        public int TransitionalZoneSize { get; set; }

        /// <summary>
        /// Gets or Sets Spare4
        /// </summary>
        [DataMember(Name = "Spare4", IsRequired = true, EmitDefaultValue = true)]
        public int Spare4 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChannelManagement {\n");
            sb.Append("  MessageID: ").Append(MessageID).Append("\n");
            sb.Append("  RepeatIndicator: ").Append(RepeatIndicator).Append("\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  Spare1: ").Append(Spare1).Append("\n");
            sb.Append("  ChannelA: ").Append(ChannelA).Append("\n");
            sb.Append("  ChannelB: ").Append(ChannelB).Append("\n");
            sb.Append("  TxRxMode: ").Append(TxRxMode).Append("\n");
            sb.Append("  LowPower: ").Append(LowPower).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  Unicast: ").Append(Unicast).Append("\n");
            sb.Append("  IsAddressed: ").Append(IsAddressed).Append("\n");
            sb.Append("  BwA: ").Append(BwA).Append("\n");
            sb.Append("  BwB: ").Append(BwB).Append("\n");
            sb.Append("  TransitionalZoneSize: ").Append(TransitionalZoneSize).Append("\n");
            sb.Append("  Spare4: ").Append(Spare4).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
