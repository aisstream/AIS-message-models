/*
 * Ais-Stream WebsocketObjects
 *
 * OpenAPI 3.0 definitions for the data models used by aisstream.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace aisStream.Model
{
    /// <summary>
    /// ShipStaticData
    /// </summary>
    [DataContract(Name = "ShipStaticData")]
    public partial class ShipStaticData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipStaticData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipStaticData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipStaticData" /> class.
        /// </summary>
        /// <param name="messageID">messageID (required).</param>
        /// <param name="repeatIndicator">repeatIndicator (required).</param>
        /// <param name="userID">userID (required).</param>
        /// <param name="valid">valid (required).</param>
        /// <param name="aisVersion">aisVersion (required).</param>
        /// <param name="imoNumber">imoNumber (required).</param>
        /// <param name="callSign">callSign (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="dimension">dimension (required).</param>
        /// <param name="fixType">fixType (required).</param>
        /// <param name="eta">eta (required).</param>
        /// <param name="maximumStaticDraught">maximumStaticDraught (required).</param>
        /// <param name="destination">destination (required).</param>
        /// <param name="dte">dte (required).</param>
        /// <param name="spare">spare (required).</param>
        public ShipStaticData(int messageID = default(int), int repeatIndicator = default(int), int userID = default(int), bool valid = default(bool), int aisVersion = default(int), int imoNumber = default(int), string callSign = default(string), string name = default(string), int type = default(int), ShipStaticDataDimension dimension = default(ShipStaticDataDimension), int fixType = default(int), ShipStaticDataEta eta = default(ShipStaticDataEta), double maximumStaticDraught = default(double), string destination = default(string), bool dte = default(bool), bool spare = default(bool))
        {
            this.MessageID = messageID;
            this.RepeatIndicator = repeatIndicator;
            this.UserID = userID;
            this.Valid = valid;
            this.AisVersion = aisVersion;
            this.ImoNumber = imoNumber;
            // to ensure "callSign" is required (not null)
            if (callSign == null)
            {
                throw new ArgumentNullException("callSign is a required property for ShipStaticData and cannot be null");
            }
            this.CallSign = callSign;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ShipStaticData and cannot be null");
            }
            this.Name = name;
            this.Type = type;
            // to ensure "dimension" is required (not null)
            if (dimension == null)
            {
                throw new ArgumentNullException("dimension is a required property for ShipStaticData and cannot be null");
            }
            this.Dimension = dimension;
            this.FixType = fixType;
            // to ensure "eta" is required (not null)
            if (eta == null)
            {
                throw new ArgumentNullException("eta is a required property for ShipStaticData and cannot be null");
            }
            this.Eta = eta;
            this.MaximumStaticDraught = maximumStaticDraught;
            // to ensure "destination" is required (not null)
            if (destination == null)
            {
                throw new ArgumentNullException("destination is a required property for ShipStaticData and cannot be null");
            }
            this.Destination = destination;
            this.Dte = dte;
            this.Spare = spare;
        }

        /// <summary>
        /// Gets or Sets MessageID
        /// </summary>
        [DataMember(Name = "MessageID", IsRequired = true, EmitDefaultValue = true)]
        public int MessageID { get; set; }

        /// <summary>
        /// Gets or Sets RepeatIndicator
        /// </summary>
        [DataMember(Name = "RepeatIndicator", IsRequired = true, EmitDefaultValue = true)]
        public int RepeatIndicator { get; set; }

        /// <summary>
        /// Gets or Sets UserID
        /// </summary>
        [DataMember(Name = "UserID", IsRequired = true, EmitDefaultValue = true)]
        public int UserID { get; set; }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name = "Valid", IsRequired = true, EmitDefaultValue = true)]
        public bool Valid { get; set; }

        /// <summary>
        /// Gets or Sets AisVersion
        /// </summary>
        [DataMember(Name = "AisVersion", IsRequired = true, EmitDefaultValue = true)]
        public int AisVersion { get; set; }

        /// <summary>
        /// Gets or Sets ImoNumber
        /// </summary>
        [DataMember(Name = "ImoNumber", IsRequired = true, EmitDefaultValue = true)]
        public int ImoNumber { get; set; }

        /// <summary>
        /// Gets or Sets CallSign
        /// </summary>
        [DataMember(Name = "CallSign", IsRequired = true, EmitDefaultValue = true)]
        public string CallSign { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "Type", IsRequired = true, EmitDefaultValue = true)]
        public int Type { get; set; }

        /// <summary>
        /// Gets or Sets Dimension
        /// </summary>
        [DataMember(Name = "Dimension", IsRequired = true, EmitDefaultValue = true)]
        public ShipStaticDataDimension Dimension { get; set; }

        /// <summary>
        /// Gets or Sets FixType
        /// </summary>
        [DataMember(Name = "FixType", IsRequired = true, EmitDefaultValue = true)]
        public int FixType { get; set; }

        /// <summary>
        /// Gets or Sets Eta
        /// </summary>
        [DataMember(Name = "Eta", IsRequired = true, EmitDefaultValue = true)]
        public ShipStaticDataEta Eta { get; set; }

        /// <summary>
        /// Gets or Sets MaximumStaticDraught
        /// </summary>
        [DataMember(Name = "MaximumStaticDraught", IsRequired = true, EmitDefaultValue = true)]
        public double MaximumStaticDraught { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "Destination", IsRequired = true, EmitDefaultValue = true)]
        public string Destination { get; set; }

        /// <summary>
        /// Gets or Sets Dte
        /// </summary>
        [DataMember(Name = "Dte", IsRequired = true, EmitDefaultValue = true)]
        public bool Dte { get; set; }

        /// <summary>
        /// Gets or Sets Spare
        /// </summary>
        [DataMember(Name = "Spare", IsRequired = true, EmitDefaultValue = true)]
        public bool Spare { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipStaticData {\n");
            sb.Append("  MessageID: ").Append(MessageID).Append("\n");
            sb.Append("  RepeatIndicator: ").Append(RepeatIndicator).Append("\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  AisVersion: ").Append(AisVersion).Append("\n");
            sb.Append("  ImoNumber: ").Append(ImoNumber).Append("\n");
            sb.Append("  CallSign: ").Append(CallSign).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Dimension: ").Append(Dimension).Append("\n");
            sb.Append("  FixType: ").Append(FixType).Append("\n");
            sb.Append("  Eta: ").Append(Eta).Append("\n");
            sb.Append("  MaximumStaticDraught: ").Append(MaximumStaticDraught).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Dte: ").Append(Dte).Append("\n");
            sb.Append("  Spare: ").Append(Spare).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
