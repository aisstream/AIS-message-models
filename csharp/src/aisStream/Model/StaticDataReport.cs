/*
 * Ais-Stream WebsocketObjects
 *
 * OpenAPI 3.0 definitions for the data models used by aisstream.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace aisStream.Model
{
    /// <summary>
    /// StaticDataReport
    /// </summary>
    [DataContract(Name = "StaticDataReport")]
    public partial class StaticDataReport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StaticDataReport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StaticDataReport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StaticDataReport" /> class.
        /// </summary>
        /// <param name="messageID">messageID (required).</param>
        /// <param name="repeatIndicator">repeatIndicator (required).</param>
        /// <param name="userID">userID (required).</param>
        /// <param name="valid">valid (required).</param>
        /// <param name="reserved">reserved (required).</param>
        /// <param name="partNumber">partNumber (required).</param>
        /// <param name="reportA">reportA (required).</param>
        /// <param name="reportB">reportB (required).</param>
        public StaticDataReport(int messageID = default(int), int repeatIndicator = default(int), int userID = default(int), bool valid = default(bool), int reserved = default(int), bool partNumber = default(bool), StaticDataReportReportA reportA = default(StaticDataReportReportA), StaticDataReportReportB reportB = default(StaticDataReportReportB))
        {
            this.MessageID = messageID;
            this.RepeatIndicator = repeatIndicator;
            this.UserID = userID;
            this.Valid = valid;
            this.Reserved = reserved;
            this.PartNumber = partNumber;
            // to ensure "reportA" is required (not null)
            if (reportA == null)
            {
                throw new ArgumentNullException("reportA is a required property for StaticDataReport and cannot be null");
            }
            this.ReportA = reportA;
            // to ensure "reportB" is required (not null)
            if (reportB == null)
            {
                throw new ArgumentNullException("reportB is a required property for StaticDataReport and cannot be null");
            }
            this.ReportB = reportB;
        }

        /// <summary>
        /// Gets or Sets MessageID
        /// </summary>
        [DataMember(Name = "MessageID", IsRequired = true, EmitDefaultValue = true)]
        public int MessageID { get; set; }

        /// <summary>
        /// Gets or Sets RepeatIndicator
        /// </summary>
        [DataMember(Name = "RepeatIndicator", IsRequired = true, EmitDefaultValue = true)]
        public int RepeatIndicator { get; set; }

        /// <summary>
        /// Gets or Sets UserID
        /// </summary>
        [DataMember(Name = "UserID", IsRequired = true, EmitDefaultValue = true)]
        public int UserID { get; set; }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name = "Valid", IsRequired = true, EmitDefaultValue = true)]
        public bool Valid { get; set; }

        /// <summary>
        /// Gets or Sets Reserved
        /// </summary>
        [DataMember(Name = "Reserved", IsRequired = true, EmitDefaultValue = true)]
        public int Reserved { get; set; }

        /// <summary>
        /// Gets or Sets PartNumber
        /// </summary>
        [DataMember(Name = "PartNumber", IsRequired = true, EmitDefaultValue = true)]
        public bool PartNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReportA
        /// </summary>
        [DataMember(Name = "ReportA", IsRequired = true, EmitDefaultValue = true)]
        public StaticDataReportReportA ReportA { get; set; }

        /// <summary>
        /// Gets or Sets ReportB
        /// </summary>
        [DataMember(Name = "ReportB", IsRequired = true, EmitDefaultValue = true)]
        public StaticDataReportReportB ReportB { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StaticDataReport {\n");
            sb.Append("  MessageID: ").Append(MessageID).Append("\n");
            sb.Append("  RepeatIndicator: ").Append(RepeatIndicator).Append("\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  Reserved: ").Append(Reserved).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  ReportA: ").Append(ReportA).Append("\n");
            sb.Append("  ReportB: ").Append(ReportB).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
