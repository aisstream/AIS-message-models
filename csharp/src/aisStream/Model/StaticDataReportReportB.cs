/*
 * Ais-Stream WebsocketObjects
 *
 * OpenAPI 3.0 definitions for the data models used by aisstream.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace aisStream.Model
{
    /// <summary>
    /// StaticDataReportReportB
    /// </summary>
    [DataContract(Name = "StaticDataReport_ReportB")]
    public partial class StaticDataReportReportB : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StaticDataReportReportB" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StaticDataReportReportB() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StaticDataReportReportB" /> class.
        /// </summary>
        /// <param name="valid">valid (required).</param>
        /// <param name="shipType">shipType (required).</param>
        /// <param name="vendorIDName">vendorIDName (required).</param>
        /// <param name="venderIDModel">venderIDModel (required).</param>
        /// <param name="venderIDSerial">venderIDSerial (required).</param>
        /// <param name="callSign">callSign (required).</param>
        /// <param name="dimension">dimension (required).</param>
        /// <param name="fixType">fixType (required).</param>
        /// <param name="spare">spare (required).</param>
        public StaticDataReportReportB(bool valid = default(bool), int shipType = default(int), string vendorIDName = default(string), int venderIDModel = default(int), int venderIDSerial = default(int), string callSign = default(string), ShipStaticDataDimension dimension = default(ShipStaticDataDimension), int fixType = default(int), int spare = default(int))
        {
            this.Valid = valid;
            this.ShipType = shipType;
            // to ensure "vendorIDName" is required (not null)
            if (vendorIDName == null)
            {
                throw new ArgumentNullException("vendorIDName is a required property for StaticDataReportReportB and cannot be null");
            }
            this.VendorIDName = vendorIDName;
            this.VenderIDModel = venderIDModel;
            this.VenderIDSerial = venderIDSerial;
            // to ensure "callSign" is required (not null)
            if (callSign == null)
            {
                throw new ArgumentNullException("callSign is a required property for StaticDataReportReportB and cannot be null");
            }
            this.CallSign = callSign;
            // to ensure "dimension" is required (not null)
            if (dimension == null)
            {
                throw new ArgumentNullException("dimension is a required property for StaticDataReportReportB and cannot be null");
            }
            this.Dimension = dimension;
            this.FixType = fixType;
            this.Spare = spare;
        }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name = "Valid", IsRequired = true, EmitDefaultValue = true)]
        public bool Valid { get; set; }

        /// <summary>
        /// Gets or Sets ShipType
        /// </summary>
        [DataMember(Name = "ShipType", IsRequired = true, EmitDefaultValue = true)]
        public int ShipType { get; set; }

        /// <summary>
        /// Gets or Sets VendorIDName
        /// </summary>
        [DataMember(Name = "VendorIDName", IsRequired = true, EmitDefaultValue = true)]
        public string VendorIDName { get; set; }

        /// <summary>
        /// Gets or Sets VenderIDModel
        /// </summary>
        [DataMember(Name = "VenderIDModel", IsRequired = true, EmitDefaultValue = true)]
        public int VenderIDModel { get; set; }

        /// <summary>
        /// Gets or Sets VenderIDSerial
        /// </summary>
        [DataMember(Name = "VenderIDSerial", IsRequired = true, EmitDefaultValue = true)]
        public int VenderIDSerial { get; set; }

        /// <summary>
        /// Gets or Sets CallSign
        /// </summary>
        [DataMember(Name = "CallSign", IsRequired = true, EmitDefaultValue = true)]
        public string CallSign { get; set; }

        /// <summary>
        /// Gets or Sets Dimension
        /// </summary>
        [DataMember(Name = "Dimension", IsRequired = true, EmitDefaultValue = true)]
        public ShipStaticDataDimension Dimension { get; set; }

        /// <summary>
        /// Gets or Sets FixType
        /// </summary>
        [DataMember(Name = "FixType", IsRequired = true, EmitDefaultValue = true)]
        public int FixType { get; set; }

        /// <summary>
        /// Gets or Sets Spare
        /// </summary>
        [DataMember(Name = "Spare", IsRequired = true, EmitDefaultValue = true)]
        public int Spare { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StaticDataReportReportB {\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  ShipType: ").Append(ShipType).Append("\n");
            sb.Append("  VendorIDName: ").Append(VendorIDName).Append("\n");
            sb.Append("  VenderIDModel: ").Append(VenderIDModel).Append("\n");
            sb.Append("  VenderIDSerial: ").Append(VenderIDSerial).Append("\n");
            sb.Append("  CallSign: ").Append(CallSign).Append("\n");
            sb.Append("  Dimension: ").Append(Dimension).Append("\n");
            sb.Append("  FixType: ").Append(FixType).Append("\n");
            sb.Append("  Spare: ").Append(Spare).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
