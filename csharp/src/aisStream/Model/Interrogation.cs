/*
 * Ais-Stream WebsocketObjects
 *
 * OpenAPI 3.0 definitions for the data models used by aisstream.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace aisStream.Model
{
    /// <summary>
    /// Interrogation
    /// </summary>
    [DataContract(Name = "Interrogation")]
    public partial class Interrogation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Interrogation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Interrogation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Interrogation" /> class.
        /// </summary>
        /// <param name="messageID">messageID (required).</param>
        /// <param name="repeatIndicator">repeatIndicator (required).</param>
        /// <param name="userID">userID (required).</param>
        /// <param name="valid">valid (required).</param>
        /// <param name="spare">spare (required).</param>
        /// <param name="station1Msg1">station1Msg1 (required).</param>
        /// <param name="station1Msg2">station1Msg2 (required).</param>
        /// <param name="station2">station2 (required).</param>
        public Interrogation(int messageID = default(int), int repeatIndicator = default(int), int userID = default(int), bool valid = default(bool), int spare = default(int), InterrogationStation1Msg1 station1Msg1 = default(InterrogationStation1Msg1), InterrogationStation1Msg2 station1Msg2 = default(InterrogationStation1Msg2), InterrogationStation2 station2 = default(InterrogationStation2))
        {
            this.MessageID = messageID;
            this.RepeatIndicator = repeatIndicator;
            this.UserID = userID;
            this.Valid = valid;
            this.Spare = spare;
            // to ensure "station1Msg1" is required (not null)
            if (station1Msg1 == null)
            {
                throw new ArgumentNullException("station1Msg1 is a required property for Interrogation and cannot be null");
            }
            this.Station1Msg1 = station1Msg1;
            // to ensure "station1Msg2" is required (not null)
            if (station1Msg2 == null)
            {
                throw new ArgumentNullException("station1Msg2 is a required property for Interrogation and cannot be null");
            }
            this.Station1Msg2 = station1Msg2;
            // to ensure "station2" is required (not null)
            if (station2 == null)
            {
                throw new ArgumentNullException("station2 is a required property for Interrogation and cannot be null");
            }
            this.Station2 = station2;
        }

        /// <summary>
        /// Gets or Sets MessageID
        /// </summary>
        [DataMember(Name = "MessageID", IsRequired = true, EmitDefaultValue = true)]
        public int MessageID { get; set; }

        /// <summary>
        /// Gets or Sets RepeatIndicator
        /// </summary>
        [DataMember(Name = "RepeatIndicator", IsRequired = true, EmitDefaultValue = true)]
        public int RepeatIndicator { get; set; }

        /// <summary>
        /// Gets or Sets UserID
        /// </summary>
        [DataMember(Name = "UserID", IsRequired = true, EmitDefaultValue = true)]
        public int UserID { get; set; }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name = "Valid", IsRequired = true, EmitDefaultValue = true)]
        public bool Valid { get; set; }

        /// <summary>
        /// Gets or Sets Spare
        /// </summary>
        [DataMember(Name = "Spare", IsRequired = true, EmitDefaultValue = true)]
        public int Spare { get; set; }

        /// <summary>
        /// Gets or Sets Station1Msg1
        /// </summary>
        [DataMember(Name = "Station1Msg1", IsRequired = true, EmitDefaultValue = true)]
        public InterrogationStation1Msg1 Station1Msg1 { get; set; }

        /// <summary>
        /// Gets or Sets Station1Msg2
        /// </summary>
        [DataMember(Name = "Station1Msg2", IsRequired = true, EmitDefaultValue = true)]
        public InterrogationStation1Msg2 Station1Msg2 { get; set; }

        /// <summary>
        /// Gets or Sets Station2
        /// </summary>
        [DataMember(Name = "Station2", IsRequired = true, EmitDefaultValue = true)]
        public InterrogationStation2 Station2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Interrogation {\n");
            sb.Append("  MessageID: ").Append(MessageID).Append("\n");
            sb.Append("  RepeatIndicator: ").Append(RepeatIndicator).Append("\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  Spare: ").Append(Spare).Append("\n");
            sb.Append("  Station1Msg1: ").Append(Station1Msg1).Append("\n");
            sb.Append("  Station1Msg2: ").Append(Station1Msg2).Append("\n");
            sb.Append("  Station2: ").Append(Station2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
