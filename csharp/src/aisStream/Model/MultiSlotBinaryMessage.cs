/*
 * Ais-Stream WebsocketObjects
 *
 * OpenAPI 3.0 definitions for the data models used by aisstream.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace aisStream.Model
{
    /// <summary>
    /// MultiSlotBinaryMessage
    /// </summary>
    [DataContract(Name = "MultiSlotBinaryMessage")]
    public partial class MultiSlotBinaryMessage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiSlotBinaryMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MultiSlotBinaryMessage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiSlotBinaryMessage" /> class.
        /// </summary>
        /// <param name="messageID">messageID (required).</param>
        /// <param name="repeatIndicator">repeatIndicator (required).</param>
        /// <param name="userID">userID (required).</param>
        /// <param name="valid">valid (required).</param>
        /// <param name="destinationIDValid">destinationIDValid (required).</param>
        /// <param name="applicationIDValid">applicationIDValid (required).</param>
        /// <param name="destinationID">destinationID (required).</param>
        /// <param name="spare1">spare1 (required).</param>
        /// <param name="applicationID">applicationID (required).</param>
        /// <param name="payload">payload (required).</param>
        /// <param name="spare2">spare2 (required).</param>
        /// <param name="communicationStateIsItdma">communicationStateIsItdma (required).</param>
        /// <param name="communicationState">communicationState (required).</param>
        public MultiSlotBinaryMessage(int messageID = default(int), int repeatIndicator = default(int), int userID = default(int), bool valid = default(bool), bool destinationIDValid = default(bool), bool applicationIDValid = default(bool), int destinationID = default(int), int spare1 = default(int), AddressedBinaryMessageApplicationID applicationID = default(AddressedBinaryMessageApplicationID), string payload = default(string), int spare2 = default(int), bool communicationStateIsItdma = default(bool), int communicationState = default(int))
        {
            this.MessageID = messageID;
            this.RepeatIndicator = repeatIndicator;
            this.UserID = userID;
            this.Valid = valid;
            this.DestinationIDValid = destinationIDValid;
            this.ApplicationIDValid = applicationIDValid;
            this.DestinationID = destinationID;
            this.Spare1 = spare1;
            // to ensure "applicationID" is required (not null)
            if (applicationID == null)
            {
                throw new ArgumentNullException("applicationID is a required property for MultiSlotBinaryMessage and cannot be null");
            }
            this.ApplicationID = applicationID;
            // to ensure "payload" is required (not null)
            if (payload == null)
            {
                throw new ArgumentNullException("payload is a required property for MultiSlotBinaryMessage and cannot be null");
            }
            this.Payload = payload;
            this.Spare2 = spare2;
            this.CommunicationStateIsItdma = communicationStateIsItdma;
            this.CommunicationState = communicationState;
        }

        /// <summary>
        /// Gets or Sets MessageID
        /// </summary>
        [DataMember(Name = "MessageID", IsRequired = true, EmitDefaultValue = true)]
        public int MessageID { get; set; }

        /// <summary>
        /// Gets or Sets RepeatIndicator
        /// </summary>
        [DataMember(Name = "RepeatIndicator", IsRequired = true, EmitDefaultValue = true)]
        public int RepeatIndicator { get; set; }

        /// <summary>
        /// Gets or Sets UserID
        /// </summary>
        [DataMember(Name = "UserID", IsRequired = true, EmitDefaultValue = true)]
        public int UserID { get; set; }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name = "Valid", IsRequired = true, EmitDefaultValue = true)]
        public bool Valid { get; set; }

        /// <summary>
        /// Gets or Sets DestinationIDValid
        /// </summary>
        [DataMember(Name = "DestinationIDValid", IsRequired = true, EmitDefaultValue = true)]
        public bool DestinationIDValid { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationIDValid
        /// </summary>
        [DataMember(Name = "ApplicationIDValid", IsRequired = true, EmitDefaultValue = true)]
        public bool ApplicationIDValid { get; set; }

        /// <summary>
        /// Gets or Sets DestinationID
        /// </summary>
        [DataMember(Name = "DestinationID", IsRequired = true, EmitDefaultValue = true)]
        public int DestinationID { get; set; }

        /// <summary>
        /// Gets or Sets Spare1
        /// </summary>
        [DataMember(Name = "Spare1", IsRequired = true, EmitDefaultValue = true)]
        public int Spare1 { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationID
        /// </summary>
        [DataMember(Name = "ApplicationID", IsRequired = true, EmitDefaultValue = true)]
        public AddressedBinaryMessageApplicationID ApplicationID { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name = "Payload", IsRequired = true, EmitDefaultValue = true)]
        public string Payload { get; set; }

        /// <summary>
        /// Gets or Sets Spare2
        /// </summary>
        [DataMember(Name = "Spare2", IsRequired = true, EmitDefaultValue = true)]
        public int Spare2 { get; set; }

        /// <summary>
        /// Gets or Sets CommunicationStateIsItdma
        /// </summary>
        [DataMember(Name = "CommunicationStateIsItdma", IsRequired = true, EmitDefaultValue = true)]
        public bool CommunicationStateIsItdma { get; set; }

        /// <summary>
        /// Gets or Sets CommunicationState
        /// </summary>
        [DataMember(Name = "CommunicationState", IsRequired = true, EmitDefaultValue = true)]
        public int CommunicationState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MultiSlotBinaryMessage {\n");
            sb.Append("  MessageID: ").Append(MessageID).Append("\n");
            sb.Append("  RepeatIndicator: ").Append(RepeatIndicator).Append("\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  DestinationIDValid: ").Append(DestinationIDValid).Append("\n");
            sb.Append("  ApplicationIDValid: ").Append(ApplicationIDValid).Append("\n");
            sb.Append("  DestinationID: ").Append(DestinationID).Append("\n");
            sb.Append("  Spare1: ").Append(Spare1).Append("\n");
            sb.Append("  ApplicationID: ").Append(ApplicationID).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  Spare2: ").Append(Spare2).Append("\n");
            sb.Append("  CommunicationStateIsItdma: ").Append(CommunicationStateIsItdma).Append("\n");
            sb.Append("  CommunicationState: ").Append(CommunicationState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
