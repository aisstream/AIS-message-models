/*
 * Ais-Stream WebsocketObjects
 *
 * OpenAPI 3.0 definitions for the data models used by aisstream.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace aisStream.Model
{
    /// <summary>
    /// SubscriptionMessage
    /// </summary>
    [DataContract(Name = "SubscriptionMessage")]
    public partial class SubscriptionMessage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscriptionMessage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionMessage" /> class.
        /// </summary>
        /// <param name="aPIKey">aPIKey (required).</param>
        /// <param name="boundingBoxes">boundingBoxes (required).</param>
        /// <param name="filtersShipMMSI">filtersShipMMSI.</param>
        /// <param name="filterMessageTypes">filterMessageTypes.</param>
        public SubscriptionMessage(string aPIKey = default(string), List<List<List<double>>> boundingBoxes = default(List<List<List<double>>>), List<string> filtersShipMMSI = default(List<string>), List<AisMessageTypes> filterMessageTypes = default(List<AisMessageTypes>))
        {
            // to ensure "aPIKey" is required (not null)
            if (aPIKey == null)
            {
                throw new ArgumentNullException("aPIKey is a required property for SubscriptionMessage and cannot be null");
            }
            this.APIKey = aPIKey;
            // to ensure "boundingBoxes" is required (not null)
            if (boundingBoxes == null)
            {
                throw new ArgumentNullException("boundingBoxes is a required property for SubscriptionMessage and cannot be null");
            }
            this.BoundingBoxes = boundingBoxes;
            this.FiltersShipMMSI = filtersShipMMSI;
            this.FilterMessageTypes = filterMessageTypes;
        }

        /// <summary>
        /// Gets or Sets APIKey
        /// </summary>
        [DataMember(Name = "APIKey", IsRequired = true, EmitDefaultValue = true)]
        public string APIKey { get; set; }

        /// <summary>
        /// Gets or Sets BoundingBoxes
        /// </summary>
        [DataMember(Name = "BoundingBoxes", IsRequired = true, EmitDefaultValue = true)]
        public List<List<List<double>>> BoundingBoxes { get; set; }

        /// <summary>
        /// Gets or Sets FiltersShipMMSI
        /// </summary>
        [DataMember(Name = "FiltersShipMMSI", EmitDefaultValue = false)]
        public List<string> FiltersShipMMSI { get; set; }

        /// <summary>
        /// Gets or Sets FilterMessageTypes
        /// </summary>
        [DataMember(Name = "FilterMessageTypes", EmitDefaultValue = false)]
        public List<AisMessageTypes> FilterMessageTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubscriptionMessage {\n");
            sb.Append("  APIKey: ").Append(APIKey).Append("\n");
            sb.Append("  BoundingBoxes: ").Append(BoundingBoxes).Append("\n");
            sb.Append("  FiltersShipMMSI: ").Append(FiltersShipMMSI).Append("\n");
            sb.Append("  FilterMessageTypes: ").Append(FilterMessageTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
