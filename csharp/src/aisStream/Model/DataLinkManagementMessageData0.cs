/*
 * Ais-Stream WebsocketObjects
 *
 * OpenAPI 3.0 definitions for the data models used by aisstream.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace aisStream.Model
{
    /// <summary>
    /// DataLinkManagementMessageData0
    /// </summary>
    [DataContract(Name = "DataLinkManagementMessage_Data_0")]
    public partial class DataLinkManagementMessageData0 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataLinkManagementMessageData0" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DataLinkManagementMessageData0() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataLinkManagementMessageData0" /> class.
        /// </summary>
        /// <param name="valid">valid (required).</param>
        /// <param name="offset">offset (required).</param>
        /// <param name="integerOfSlots">integerOfSlots (required).</param>
        /// <param name="timeOut">timeOut (required).</param>
        /// <param name="increment">increment (required).</param>
        public DataLinkManagementMessageData0(bool valid = default(bool), int offset = default(int), int integerOfSlots = default(int), int timeOut = default(int), int increment = default(int))
        {
            this.Valid = valid;
            this.Offset = offset;
            this.IntegerOfSlots = integerOfSlots;
            this.TimeOut = timeOut;
            this.Increment = increment;
        }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name = "Valid", IsRequired = true, EmitDefaultValue = true)]
        public bool Valid { get; set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name = "Offset", IsRequired = true, EmitDefaultValue = true)]
        public int Offset { get; set; }

        /// <summary>
        /// Gets or Sets IntegerOfSlots
        /// </summary>
        [DataMember(Name = "integerOfSlots", IsRequired = true, EmitDefaultValue = true)]
        public int IntegerOfSlots { get; set; }

        /// <summary>
        /// Gets or Sets TimeOut
        /// </summary>
        [DataMember(Name = "TimeOut", IsRequired = true, EmitDefaultValue = true)]
        public int TimeOut { get; set; }

        /// <summary>
        /// Gets or Sets Increment
        /// </summary>
        [DataMember(Name = "Increment", IsRequired = true, EmitDefaultValue = true)]
        public int Increment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataLinkManagementMessageData0 {\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  IntegerOfSlots: ").Append(IntegerOfSlots).Append("\n");
            sb.Append("  TimeOut: ").Append(TimeOut).Append("\n");
            sb.Append("  Increment: ").Append(Increment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
