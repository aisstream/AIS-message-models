/*
 * Ais-Stream WebsocketObjects
 *
 * OpenAPI 3.0 definitions for the data models used by aisstream.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace aisStream.Model
{
    /// <summary>
    /// AidsToNavigationReport
    /// </summary>
    [DataContract(Name = "AidsToNavigationReport")]
    public partial class AidsToNavigationReport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AidsToNavigationReport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AidsToNavigationReport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AidsToNavigationReport" /> class.
        /// </summary>
        /// <param name="messageID">messageID (required).</param>
        /// <param name="repeatIndicator">repeatIndicator (required).</param>
        /// <param name="userID">userID (required).</param>
        /// <param name="valid">valid (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="positionAccuracy">positionAccuracy (required).</param>
        /// <param name="longitude">longitude (required).</param>
        /// <param name="latitude">latitude (required).</param>
        /// <param name="dimension">dimension (required).</param>
        /// <param name="fixtype">fixtype (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="offPosition">offPosition (required).</param>
        /// <param name="atoN">atoN (required).</param>
        /// <param name="raim">raim (required).</param>
        /// <param name="virtualAtoN">virtualAtoN (required).</param>
        /// <param name="assignedMode">assignedMode (required).</param>
        /// <param name="spare">spare (required).</param>
        /// <param name="nameExtension">nameExtension (required).</param>
        public AidsToNavigationReport(int messageID = default(int), int repeatIndicator = default(int), int userID = default(int), bool valid = default(bool), int type = default(int), string name = default(string), bool positionAccuracy = default(bool), double longitude = default(double), double latitude = default(double), ShipStaticDataDimension dimension = default(ShipStaticDataDimension), int fixtype = default(int), int timestamp = default(int), bool offPosition = default(bool), int atoN = default(int), bool raim = default(bool), bool virtualAtoN = default(bool), bool assignedMode = default(bool), bool spare = default(bool), string nameExtension = default(string))
        {
            this.MessageID = messageID;
            this.RepeatIndicator = repeatIndicator;
            this.UserID = userID;
            this.Valid = valid;
            this.Type = type;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for AidsToNavigationReport and cannot be null");
            }
            this.Name = name;
            this.PositionAccuracy = positionAccuracy;
            this.Longitude = longitude;
            this.Latitude = latitude;
            // to ensure "dimension" is required (not null)
            if (dimension == null)
            {
                throw new ArgumentNullException("dimension is a required property for AidsToNavigationReport and cannot be null");
            }
            this.Dimension = dimension;
            this.Fixtype = fixtype;
            this.Timestamp = timestamp;
            this.OffPosition = offPosition;
            this.AtoN = atoN;
            this.Raim = raim;
            this.VirtualAtoN = virtualAtoN;
            this.AssignedMode = assignedMode;
            this.Spare = spare;
            // to ensure "nameExtension" is required (not null)
            if (nameExtension == null)
            {
                throw new ArgumentNullException("nameExtension is a required property for AidsToNavigationReport and cannot be null");
            }
            this.NameExtension = nameExtension;
        }

        /// <summary>
        /// Gets or Sets MessageID
        /// </summary>
        [DataMember(Name = "MessageID", IsRequired = true, EmitDefaultValue = true)]
        public int MessageID { get; set; }

        /// <summary>
        /// Gets or Sets RepeatIndicator
        /// </summary>
        [DataMember(Name = "RepeatIndicator", IsRequired = true, EmitDefaultValue = true)]
        public int RepeatIndicator { get; set; }

        /// <summary>
        /// Gets or Sets UserID
        /// </summary>
        [DataMember(Name = "UserID", IsRequired = true, EmitDefaultValue = true)]
        public int UserID { get; set; }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name = "Valid", IsRequired = true, EmitDefaultValue = true)]
        public bool Valid { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "Type", IsRequired = true, EmitDefaultValue = true)]
        public int Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PositionAccuracy
        /// </summary>
        [DataMember(Name = "PositionAccuracy", IsRequired = true, EmitDefaultValue = true)]
        public bool PositionAccuracy { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name = "Longitude", IsRequired = true, EmitDefaultValue = true)]
        public double Longitude { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name = "Latitude", IsRequired = true, EmitDefaultValue = true)]
        public double Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Dimension
        /// </summary>
        [DataMember(Name = "Dimension", IsRequired = true, EmitDefaultValue = true)]
        public ShipStaticDataDimension Dimension { get; set; }

        /// <summary>
        /// Gets or Sets Fixtype
        /// </summary>
        [DataMember(Name = "Fixtype", IsRequired = true, EmitDefaultValue = true)]
        public int Fixtype { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "Timestamp", IsRequired = true, EmitDefaultValue = true)]
        public int Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets OffPosition
        /// </summary>
        [DataMember(Name = "OffPosition", IsRequired = true, EmitDefaultValue = true)]
        public bool OffPosition { get; set; }

        /// <summary>
        /// Gets or Sets AtoN
        /// </summary>
        [DataMember(Name = "AtoN", IsRequired = true, EmitDefaultValue = true)]
        public int AtoN { get; set; }

        /// <summary>
        /// Gets or Sets Raim
        /// </summary>
        [DataMember(Name = "Raim", IsRequired = true, EmitDefaultValue = true)]
        public bool Raim { get; set; }

        /// <summary>
        /// Gets or Sets VirtualAtoN
        /// </summary>
        [DataMember(Name = "VirtualAtoN", IsRequired = true, EmitDefaultValue = true)]
        public bool VirtualAtoN { get; set; }

        /// <summary>
        /// Gets or Sets AssignedMode
        /// </summary>
        [DataMember(Name = "AssignedMode", IsRequired = true, EmitDefaultValue = true)]
        public bool AssignedMode { get; set; }

        /// <summary>
        /// Gets or Sets Spare
        /// </summary>
        [DataMember(Name = "Spare", IsRequired = true, EmitDefaultValue = true)]
        public bool Spare { get; set; }

        /// <summary>
        /// Gets or Sets NameExtension
        /// </summary>
        [DataMember(Name = "NameExtension", IsRequired = true, EmitDefaultValue = true)]
        public string NameExtension { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AidsToNavigationReport {\n");
            sb.Append("  MessageID: ").Append(MessageID).Append("\n");
            sb.Append("  RepeatIndicator: ").Append(RepeatIndicator).Append("\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PositionAccuracy: ").Append(PositionAccuracy).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Dimension: ").Append(Dimension).Append("\n");
            sb.Append("  Fixtype: ").Append(Fixtype).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  OffPosition: ").Append(OffPosition).Append("\n");
            sb.Append("  AtoN: ").Append(AtoN).Append("\n");
            sb.Append("  Raim: ").Append(Raim).Append("\n");
            sb.Append("  VirtualAtoN: ").Append(VirtualAtoN).Append("\n");
            sb.Append("  AssignedMode: ").Append(AssignedMode).Append("\n");
            sb.Append("  Spare: ").Append(Spare).Append("\n");
            sb.Append("  NameExtension: ").Append(NameExtension).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
