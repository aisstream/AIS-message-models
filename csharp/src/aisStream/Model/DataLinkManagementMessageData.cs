/*
 * Ais-Stream WebsocketObjects
 *
 * OpenAPI 3.0 definitions for the data models used by aisstream.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace aisStream.Model
{
    /// <summary>
    /// DataLinkManagementMessageData
    /// </summary>
    [DataContract(Name = "DataLinkManagementMessage_Data")]
    public partial class DataLinkManagementMessageData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataLinkManagementMessageData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DataLinkManagementMessageData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataLinkManagementMessageData" /> class.
        /// </summary>
        /// <param name="var0">var0 (required).</param>
        /// <param name="var1">var1 (required).</param>
        /// <param name="var2">var2 (required).</param>
        /// <param name="var3">var3 (required).</param>
        public DataLinkManagementMessageData(DataLinkManagementMessageData0 var0 = default(DataLinkManagementMessageData0), DataLinkManagementMessageData0 var1 = default(DataLinkManagementMessageData0), DataLinkManagementMessageData0 var2 = default(DataLinkManagementMessageData0), DataLinkManagementMessageData0 var3 = default(DataLinkManagementMessageData0))
        {
            // to ensure "var0" is required (not null)
            if (var0 == null)
            {
                throw new ArgumentNullException("var0 is a required property for DataLinkManagementMessageData and cannot be null");
            }
            this.Var0 = var0;
            // to ensure "var1" is required (not null)
            if (var1 == null)
            {
                throw new ArgumentNullException("var1 is a required property for DataLinkManagementMessageData and cannot be null");
            }
            this.Var1 = var1;
            // to ensure "var2" is required (not null)
            if (var2 == null)
            {
                throw new ArgumentNullException("var2 is a required property for DataLinkManagementMessageData and cannot be null");
            }
            this.Var2 = var2;
            // to ensure "var3" is required (not null)
            if (var3 == null)
            {
                throw new ArgumentNullException("var3 is a required property for DataLinkManagementMessageData and cannot be null");
            }
            this.Var3 = var3;
        }

        /// <summary>
        /// Gets or Sets Var0
        /// </summary>
        [DataMember(Name = "0", IsRequired = true, EmitDefaultValue = true)]
        public DataLinkManagementMessageData0 Var0 { get; set; }

        /// <summary>
        /// Gets or Sets Var1
        /// </summary>
        [DataMember(Name = "1", IsRequired = true, EmitDefaultValue = true)]
        public DataLinkManagementMessageData0 Var1 { get; set; }

        /// <summary>
        /// Gets or Sets Var2
        /// </summary>
        [DataMember(Name = "2", IsRequired = true, EmitDefaultValue = true)]
        public DataLinkManagementMessageData0 Var2 { get; set; }

        /// <summary>
        /// Gets or Sets Var3
        /// </summary>
        [DataMember(Name = "3", IsRequired = true, EmitDefaultValue = true)]
        public DataLinkManagementMessageData0 Var3 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataLinkManagementMessageData {\n");
            sb.Append("  Var0: ").Append(Var0).Append("\n");
            sb.Append("  Var1: ").Append(Var1).Append("\n");
            sb.Append("  Var2: ").Append(Var2).Append("\n");
            sb.Append("  Var3: ").Append(Var3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
